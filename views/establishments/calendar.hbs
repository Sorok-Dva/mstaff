<link href='/static/assets/css/fullcalendar/core/main.css' rel='stylesheet' />
<link href='/static/assets/css/fullcalendar/daygrid/main.css' rel='stylesheet' />
<link href='/static/assets/css/fullcalendar/timegrid/main.css' rel='stylesheet' />
<link href='/static/assets/css/fullcalendar/list/main.css' rel='stylesheet' />
<style>
  td.fc-day.fc-past {
    background-color: #EEEEEE;
  }
</style>
<div class="row">
	<div class="col-md-10 col-md-offset-1">
		<div class="card card-calendar">
			<div class="card-content">
				<div id="fullCalendar"></div>
			</div>
		</div>
	</div>
</div>
<script src='/static/assets/js/fullcalendar/core/main.js'></script>
<script src='/static/assets/js/fullcalendar/core/locales-all.js'></script>
<script src='/static/assets/js/fullcalendar/interaction/main.js'></script>
<script src='/static/assets/js/fullcalendar/daygrid/main.js'></script>
<script src='/static/assets/js/fullcalendar/timegrid/main.js'></script>
<script src='/static/assets/js/fullcalendar/list/main.js'></script>
<script>
	let $calendar = document.getElementById('fullCalendar');
	today = new Date();
	y = today.getFullYear();
	m = today.getMonth();
	d = today.getDate();

	let calendar = new FullCalendar.Calendar($calendar, {
    plugins: ['interaction', 'dayGrid', 'timeGrid', 'list' ],
    header: {
      left: 'prev,next today',
      center: 'title',
      right: 'dayGridMonth,timeGridMonth,timeGridDay,listMonth'
    },
    eventClick: (info) => {
      let id = info.event.id;
      $.get(`/api/es/{{session.currentEs}}/conference/${id}`, conference => {
        createModal({
          title: `Entretien avec ${conference.Candidate.User.firstName} ${conference.Candidate.User.lastName}`,
          modal: 'es/conference/view',
          id: 'viewConferenceModal',
          context: {
            conference
          }
        }, () => {
          $('.editConfBtn').click(function() {
            let type = $('[data-isset="true"]').attr('data-action');
            let dateString = $('#editConfDate').val();
            let year = dateString.split('/')[2].split(' ')[0];
            let month = dateString.split('/')[1] - 1;
            let day = dateString.split('/')[0];
            let hour = dateString.split('/')[2].split(' ')[1].split(':')[0];
            let min = dateString.split('/')[2].split(' ')[1].split(':')[1];
            let date = new Date(year, month, day, hour, min, 0);
            if (date === 'Invalid Date' || (type !== 'physical' && type !== 'online')) return false;
            $.post(`/api/es/conference/${conference.id}`, {type, date, _csrf}, (data) => {
              if (data) {
                let event = calendar.getEventById(info.event.id);
                event.setStart(date);
                event.setEnd(date);
                event.setProp('color', type === 'online' ? 'green' : 'orange');
                event.setProp('title', `Entretien ${type === 'online' ? 'en ligne' : 'physique'}`);
                event.setProp('editable', moment(date).isAfter(moment()));
                $('#viewConferenceModal').modal('hide');
                notification({
                  icon: 'check-circle',
                  type: 'success',
                  title: 'Événement modifié avec succès.',
                });
              } else {
                errorsHandler('Une erreur est survenue');
              }
            }).catch(error => errorsHandler(error));
          });
        })
      }).catch(error => errorsHandler(error));
    },
    locale: 'fr',
    buttonIcons: true,
    weekNumbers: false,
    navLinks: true,
    editable: true,
    eventLimit: true,
		events: [
      {{#each conferences as |conference|}}
        {
          id: {{conference.id}},
          title: 'Entretien {{#ifCond conference.type '===' 'online'}}en ligne{{else}}physique{{/ifCond}}',
          start: new Date('{{conference.date}}'),
          allDay: false,
          url: '#',
          textColor: 'black',
          color: "{{#ifCond conference.type '===' 'online'}}green{{else}}orange{{/ifCond}}",
          editable: moment('{{conference.date}}').isAfter(moment())
        },
      {{/each}}
		],
    eventRender: (event) => {
      let icon = $(event.el).css('background-color') === 'orange' ?
          `<i class="fal fa-map-marker-alt" style="margin-right: 3px;"></i>` :
          `<i class="fal fa-video" style="margin-right: 3px;"></i>`;
      let content = $(event.el).find( '.fc-content' );
      content.prepend(icon);
    },
    eventConstraint: {
      start: moment().format('YYYY-MM-DD'),
      end: '2100-01-01' // hard coded goodness unfortunately
    },
    eventDrop: (drop) => {
      let newDate = drop.event.start.toISOString();
      let id = drop.event.id;
      if (confirm(`Voulez vous vraiment déplacer cet entretien au ${moment(newDate).format('dddd Do MMMM YYYY')} ?`)) {
        if (!moment(newDate).isAfter(moment())){ drop.revert(); return false; }
        $.post(`/api/es/conference/${id}/changeDate`, { _csrf, newDate }, data => {
          if (data) {
            notification({
              icon: 'check-circle',
              type: 'success',
              title: 'Événement déplacé avec succès.',
            });
          } else {
            errorsHandler('Une erreur est survenue');
          }
        }).catch(error => errorsHandler(error));
      } else {
        drop.revert();
      }
      console.log(drop);
      // drop.revert();
    }
	});

  calendar.render();
</script>